@namespace ToSicCre8magic.Theme.Basic
@inherits ModuleBase
@implements Oqtane.Interfaces.ISettingsControl
@inject ISettingService SettingService
@inject IStringLocalizer<ThemeSettings> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer
@attribute [OqtaneIgnore]

    <div class="container">
        <div class="row mb-1 align-items-center">
            <Label Class="col-sm-3" For="scope" ResourceKey="Scope" ResourceType="@resourceType" HelpText="Specify if the settings are applicable to this page or the entire site.">Setting Scope:</Label>
            <div class="col-sm-9">
                <select id="scope" class="form-select" value="@_scope" @onchange="(e => ScopeChanged(e))">
                    @if (UserSecurity.IsAuthorized(PageState.User, RoleNames.Admin))
                {
                    <option value="site">@Localizer["Site"]</option>
                }
                <option value="page">@Localizer["Page"]</option>
            </select>
        </div>
    </div>
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="login" ResourceKey="Login" ResourceType="@resourceType" HelpText="Specify if a Login option should be displayed. Note that this option does not prevent the login page from being accessible via a direct url.">Show Login?</Label>
        <div class="col-sm-9">
            <select id="login" class="form-select" @bind="@_login">
                <option value="-">&lt;@SharedLocalizer["Not Specified"]&gt;</option>
                <option value="true">@SharedLocalizer["Yes"]</option>
                <option value="false">@SharedLocalizer["No"]</option>
            </select>
            @if (_scope != "site") {
                <div class="small text-muted">SITE: @_loginMerge</div>
            }
        </div>
    </div>
    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="register" ResourceKey="Register" ResourceType="@resourceType" HelpText="Specify if a Register option should be displayed. Note that this option is also dependent on the Allow Registration option in Site Settings.">Show Register?</Label>
        <div class="col-sm-9">
            <select id="register" class="form-select" @bind="@_register">
                <option value="-">&lt;@SharedLocalizer["Not Specified"]&gt;</option>
                <option value="true">@SharedLocalizer["Yes"]</option>
                <option value="false">@SharedLocalizer["No"]</option>
            </select>
            @if (_scope != "site") {
            <div class="small text-muted">SITE: @_registerMerge</div>
            }
        </div>
    </div>

    <div class="row mb-1 align-items-center">
        <Label Class="col-sm-3" For="footerHtml" ResourceKey="FooterHtml" ResourceType="@resourceType" HelpText="Here you can insert your own HTML code for the footer">Footer HTML:</Label>
        <div class="col-sm-9">
            <textarea id="footerHtml" class="form-control" @bind="_footerHtml" rows="4"></textarea>
            @if (_scope != "site") {
            <div class="small text-muted">SITE: @_footerHtmlMerge</div>
             }
        </div>
    </div>

</div>

@code {
    private int pageId = -1;
    private string resourceType = "ToSicCre8magic.Theme.Basic.ThemeSettings, ToSicCre8magic.Theme.Basic.Client.Oqtane"; // for localization
    private string _scope = "page";
    private string _login = "-";
    private string _register = "-";
    private string _footerHtml = "";

    private string _loginMerge = "";
    private string _registerMerge = "";
    private string _footerHtmlMerge = "";

    protected override async Task OnInitializedAsync()
    {
        if (PageState.QueryString.ContainsKey("id"))
        {
            pageId = int.Parse(PageState.QueryString["id"]);
        }

        try
        {
            await LoadSettings();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Settings {Error}", ex.Message);
            AddModuleMessage("Error Loading Settings", MessageType.Error);
        }
    }

    private async Task LoadSettings()
    {
        if (_scope == "site")
        {
            var settings = PageState.Site.Settings;
            _login = SettingService.GetSetting(settings, GetType().Namespace + ":Login", "true");
            _register = SettingService.GetSetting(settings, GetType().Namespace + ":Register", "true");
            _footerHtml = SettingService.GetSetting(settings, GetType().Namespace + ":FooterHtml", "");
        }
        else
        {
            var pageSettings = await SettingService.GetPageSettingsAsync(pageId);
            _login = SettingService.GetSetting(pageSettings, GetType().Namespace + ":Login", "-");
            _register = SettingService.GetSetting(pageSettings, GetType().Namespace + ":Register", "-");
            _footerHtml = SettingService.GetSetting(pageSettings, GetType().Namespace + ":FooterHtml", "");

            // mergedSettings:
            var mergedSettings = SettingService.MergeSettings(PageState.Site.Settings, pageSettings);
            _loginMerge = SettingService.GetSetting(mergedSettings, GetType().Namespace + ":Login", "-");
            _registerMerge = SettingService.GetSetting(mergedSettings, GetType().Namespace + ":Register", "-");
            _footerHtmlMerge = SettingService.GetSetting(mergedSettings, GetType().Namespace + ":FooterHtml", "");
        }
        await Task.Yield();
    }

    private async Task ScopeChanged(ChangeEventArgs eventArgs)
    {
        try
        {
            _scope = (string)eventArgs.Value;
            await LoadSettings();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading Settings {Error}", ex.Message);
            AddModuleMessage("Error Loading Settings", MessageType.Error);
        }
    }

    public async Task UpdateSettings()
    {
        try
        {

            var settings = (_scope == "site")
                ? await SettingService.GetSiteSettingsAsync(PageState.Site.SiteId)
                : await  SettingService.GetPageSettingsAsync(pageId);

            {
                if (_login != "-")
                {
                    settings = SettingService.SetSetting(settings, GetType().Namespace + ":Login", _login);
                } else {
                    await SettingService.DeleteSettingAsync(_scope, pageId, GetType().Namespace + ":Login");
                }


                if (_register != "-")
                {
                    settings = SettingService.SetSetting(settings, GetType().Namespace + ":Register", _register);
                }
                else
                {
                    await SettingService.DeleteSettingAsync(_scope, pageId, GetType().Namespace + ":Register");
                }

                if (!string.IsNullOrEmpty(_footerHtml)) {
                    settings = SettingService.SetSetting(settings, GetType().Namespace + ":FooterHtml", _footerHtml);

                } 
                else
                {
                    await SettingService.DeleteSettingAsync(_scope, pageId, GetType().Namespace + ":FooterHtml");
                }


                    await SettingService.UpdateSiteSettingsAsync(settings, PageState.Site.SiteId);
                }
            }
            catch (Exception ex)
            {
                await logger.LogError(ex, "Error Saving Settings {Error}", ex.Message);
                AddModuleMessage("Error Saving Settings", MessageType.Error);
            }
        }
    }
